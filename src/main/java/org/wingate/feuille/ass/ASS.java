/*
 * Copyright (C) 2018 util2
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.wingate.feuille.ass;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.wingate.feuille.util.ISO_3166;

/**
 *
 * @author util2
 */
public class ASS {
    
    // File
    private File assFile = null;
    
    private List<ISO_3166> languages = new ArrayList<>();
    
    private List<AssEvent> events = new ArrayList<>();
    private Map<String, AssStyle> styles = new HashMap<>();
    private List<String> names = new ArrayList<>();
    private List<AssPaths> svgPaths = new ArrayList<>();
    
    private List<File> attachedFonts = new ArrayList<>();
    private List<File> attachedGraphics = new ArrayList<>();
    private boolean inFontsArea = false;
    private boolean inGraphicsArea = false;
    
    //[Script Info]
    private String title = "Generated by Yggdrasil";                     // Title
    private String scriptType = "v4.00+";                                // ScriptType: v4.00+
    private String originalScript = "";
    private String translation = "";
    private String editing = "";
    private String timing = "";
    private String synchPoint = "";
    private String updateBy = "";
    private String updateDetails = "";
    private String wrapStyle = "2";                                      // WrapStyle: 2
    private String scaled = "yes";                                       // ScaledBorderAndShadow: yes
    private String matrix = "TV.601";                                    // YCbCr Matrix: TV.601
    private String resX = "1920";                                        // PlayResX: 1920
    private String resY = "1080";                                        // PlayResY: 1080
    
    //[Aegisub Project Garbage]
    private String aegisLastStyleStorage = "Default";                    // Last Style Storage: Default
    private String aegisAudioFile = "";                                  // Audio File: ../relative/path/to/file.extension
    private String aegisVideoFile = "";                                  // Video File: ../relative/path/to/file.extension
    private String aegisVideoARMode = "4";                               // Video AR Mode: 4
    private String aegisVideoARValue = "1.777778";                       // Video AR Value: 1.777778
    private String aegisVideoZoomPercent = "1.000000";                   // Video Zoom Percent: 1.000000
    private String aegisActiveLine = "1";                                // Active Line: 27
    private String aegisVideoPosition = "0";                             // Video Position: 24

    public ASS() {
        
    }
    
    public void clearData(){
        events.clear();
        styles.clear();
        names.clear();
        svgPaths.clear();
    }
    
    public static ASS NoFileToLoad(){
        ASS ass = new ASS();
        
        ass.getStyles().put("Default", AssStyle.getDefault());
        
        return ass;
    }
    
    public static ASS Read(String path){                
        ASS ass = new ASS();
        ass.assFile = new File(path);
        ass.clearData();
        String inFile = "", dataname = ""; // For attachs
        int eventIndex = 0;
        // Read file by line
        try(FileInputStream fis = new FileInputStream(path); 
                InputStreamReader isr = new InputStreamReader(fis, AssCommon.detectCharset(path)); 
                BufferedReader br = new BufferedReader(isr);){
            boolean firstLine = true;
            String line;
            while((line = br.readLine()) != null){
                //[Script Info]
                if(line.startsWith("Title")){ ass.title = line.substring("Title: ".length()); }
                if(line.startsWith("ScriptType")){ ass.scriptType = line.substring("ScriptType: ".length()); }
                //+
                if(line.startsWith("Original Script")){ ass.originalScript = line.substring("Original Script: ".length()); }
                if(line.startsWith("Original Translation")){ ass.translation = line.substring("Original Translation: ".length()); }
                if(line.startsWith("Original Editing")){ ass.editing = line.substring("Original Editing: ".length()); }
                if(line.startsWith("Original Timing")){ ass.timing = line.substring("Original Timing: ".length()); }
                if(line.startsWith("Synch Point")){ ass.synchPoint = line.substring("Synch Point: ".length()); }
                if(line.startsWith("Script Updated By")){ ass.updateBy = line.substring("Script Updated By: ".length()); }
                if(line.startsWith("Update Details")){ ass.updateDetails = line.substring("Update Details: ".length()); }
                //+
                if(line.startsWith("WrapStyle")){ ass.wrapStyle = line.substring("WrapStyle: ".length()); }
                if(line.startsWith("ScaledBorderAndShadow")){ ass.scaled = line.substring("ScaledBorderAndShadow: ".length()); }
                if(line.startsWith("YCbCr Matrix")){ ass.matrix = line.substring("YCbCr Matrix: ".length()); }
                if(line.startsWith("PlayResX")){ ass.resX = line.substring("PlayResX: ".length()); }
                if(line.startsWith("PlayResY")){ ass.resY = line.substring("PlayResY: ".length()); }
                //[Aegisub Project Garbage]
                if(line.startsWith("Last Style Storage")){ ass.aegisLastStyleStorage = line.substring("Last Style Storage: ".length()); }
                if(line.startsWith("Audio File")){ ass.aegisAudioFile = line.substring("Audio File: ".length()); }
                if(line.startsWith("Video File")){ ass.aegisVideoFile = line.substring("Video File: ".length()); }
                if(line.startsWith("Video AR Mode")){ ass.aegisVideoARMode = line.substring("Video AR Mode: ".length()); }
                if(line.startsWith("Video AR Value")){ ass.aegisVideoARValue = line.substring("Video AR Value: ".length()); }
                if(line.startsWith("Video Zoom Percent")){ ass.aegisVideoZoomPercent = line.substring("Video Zoom Percent: ".length()); }
                if(line.startsWith("Active Line")){ ass.aegisActiveLine = line.substring("Active Line: ".length()); }
                if(line.startsWith("Video Position")){ ass.aegisVideoPosition = line.substring("Video Position: ".length()); }
                //[Yggdrasil Section]
                if(line.startsWith("; DrawSVG: ")){
                    AssPaths ps = new AssPaths(line.substring("; DrawSVG: ".length()));
                    ass.svgPaths.add(ps);
                }
                if(line.startsWith("ISO-3166 Language: ")){
                    ass.languages.add(ISO_3166.getISO_3166(line.substring("ISO-3166 Language: ".length())));
                }
                //[V4+ Styles]
                if(line.startsWith("Style") & ass.scriptType.equalsIgnoreCase("v4.00")){
                    // SSA
                    AssStyle style = AssStyle.createFromSSA(line);
                    ass.styles.put(style.getName(), style);
                }else if(line.startsWith("Style")){
                    // ASS
                    AssStyle style = AssStyle.create(line);
                    ass.styles.put(style.getName(), style);
                }
                //[Events]
                if(line.toLowerCase().contains("marked=")){
                    // SSA
                    AssEvent ev = AssEvent.createFromSSA(line, ass.styles);
                    ev.setEventIndex(eventIndex + 1);
                    ev.setAss(ass);
                    ass.events.add(ev);
                    String[] array = line.split(",", 9);
                    if(array[4].isEmpty() == false){ ass.names.add(array[4]); }
                    eventIndex++;
                    firstLine = true;
                }else if(line.startsWith("Comment") | line.startsWith("Dialogue") | line.startsWith("#Proposal") | line.startsWith("#Request")){
                    // ASS
                    AssEvent ev = AssEvent.createFromASS(line, ass.styles);
                    ev.setEventIndex(eventIndex + 1);
                    ev.setAss(ass);
                    ass.events.add(ev);
                    String[] array = line.split(",", 9);
                    if(array[4].isEmpty() == false){ ass.names.add(array[4]); }
                    eventIndex++;
                    firstLine = true;
                }else{
                    if(ass.getEvents().isEmpty()) continue;
                    for(ISO_3166 iso : ass.languages){
                        AssEvent ev = ass.getEvents().getLast();
                        if(firstLine == true){
                            ev.getAllTexts().put(iso, ev.getText());
                            firstLine = false;
                        }else if(line.startsWith(iso.getAlpha3() + ": ")){
                            String[] array = line.split(",", 10);
                            ev.getAllTexts().put(iso, array[9]);
                        }
                    }
                }
//                //[Fonts]
//                if(line.startsWith("fontname")){
//                    ass.inFontsArea = true;
//                    dataname = line.substring("fontname: ".length());
//                }else if(ass.inFontsArea == true && line.isEmpty() == false){
//                    inFile += line;
//                }else if(ass.inFontsArea == true && line.isEmpty() == true){
//                    ass.inFontsArea = false;
//                    File f = AssCommon.getFile(new File("configuration"), dataname, inFile);
//                    ass.attachedFonts.add(f);
//                    inFile = "";
//                }
//                //[Graphics]
//                if(line.startsWith("filename")){
//                    ass.inGraphicsArea = true;
//                    dataname = line.substring("filename: ".length());
//                }else if(ass.inGraphicsArea == true && line.isEmpty() == false){
//                    inFile += line;
//                }else if(ass.inGraphicsArea == true && line.isEmpty() == true){
//                    ass.inGraphicsArea = false;
//                    File f = AssCommon.getFile(new File("configuration"), dataname, inFile);
//                    ass.attachedGraphics.add(f);
//                    inFile = "";
//                }
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(ASS.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ASS.class.getName()).log(Level.SEVERE, null, ex);
        }
        return ass;
    }
    
    public static void Save(String path, ASS ass){
        try(PrintWriter pw = new PrintWriter(path, StandardCharsets.UTF_8)){
            //[Script Info]
            pw.println("[Script Info]");
            pw.println("; This is an Advanced Sub Station (ASS) file generated by Yggdrasil!");
            pw.println("; Feel free to look at: https://github.com/TW2");
            pw.println("Title: " + ass.title);
            pw.println("ScriptType: " + ass.scriptType);
            //+
            pw.println("Original Script: " + ass.originalScript);
            pw.println("Original Translation: " + ass.translation);
            pw.println("Original Editing: " + ass.editing);
            pw.println("Original Timing: " + ass.timing);
            pw.println("Synch Point: " + ass.synchPoint);
            pw.println("Script Updated By: " + ass.updateBy);
            pw.println("Update Details: " + ass.updateDetails);
            //+
            pw.println("WrapStyle: " + ass.wrapStyle);
            pw.println("ScaledBorderAndShadow: " + ass.scaled);
            pw.println("YCbCr Matrix: " + ass.matrix);
            pw.println("PlayResX: " + ass.resX);
            pw.println("PlayResY: " + ass.resY);
            pw.println("");
            //[Aegisub Project Garbage]
//            pw.println("[Aegisub Project Garbage]");
//            pw.println("Last Style Storage: " + aegisLastStyleStorage);
//            pw.println("Audio File: " + aegisAudioFile);
//            pw.println("Video File: " + aegisVideoFile);
//            pw.println("Video AR Mode: " + aegisVideoARMode);
//            pw.println("Video AR Value: " + aegisVideoARValue);
//            pw.println("Video Zoom Percent: " + aegisVideoZoomPercent);
//            pw.println("Active Line: " + aegisActiveLine);
//            pw.println("Video Position: " + aegisVideoPosition);
//            pw.println("");
            //[Yggdrasil Section]
            pw.println("[Yggdrasil Section]");
            for(AssPaths ps : ass.svgPaths){
                pw.println(ps.getSection() + ps.getSvgPath());
            }
            for(ISO_3166 iso : ass.getLanguages()){
                pw.println("ISO-3166 Language: " + iso.getAlpha3());
            }
            pw.println("");
            //[V4+ Styles]
            pw.println("[V4+ Styles]");
            pw.println("Format: Name, Fontname, Fontsize, "
                    + "PrimaryColour, SecondaryColour, OutlineColour, BackColour, "
                    + "Bold, Italic, Underline, StrikeOut, "
                    + "ScaleX, ScaleY, Spacing, Angle, "
                    + "BorderStyle, Outline, Shadow, "
                    + "Alignment, MarginL, MarginR, MarginV, Encoding");            
            if(ass.styles.isEmpty() == true){
                pw.println(AssStyle.getStyle());
            }else{
                ass.styles.entrySet().forEach((entry) -> {
                    pw.println(AssStyle.toAssStyleLine(entry.getValue()));
                });
            }
            pw.println("");
            //[Events]
            pw.println("[Events]");
            pw.println("Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text");
            ass.events.forEach((ev) -> {
                pw.println(AssEvent.getAssEventLine(ev));
                if(ev.getAllTexts().isEmpty() == false){
                    boolean notFirst = false;
                    for(Map.Entry<ISO_3166, String> entry : ev.getAllTexts().entrySet()){
                        if(notFirst){
                            pw.println(AssEvent.getAssEventLine(ev, entry.getKey(), entry.getValue()));
                        }else{
                            notFirst = true;
                        }
                    }
                }
            });
            pw.println("");
        } catch (FileNotFoundException ex) {
            Logger.getLogger(ASS.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ASS.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public static String Memory(ASS ass){
        StringBuilder sb = new StringBuilder();
        
        //[Script Info]
        sb.append("[Script Info]").append("\n");
        sb.append("; This is an Advanced Sub Station (ASS) file generated by Yggdrasil!").append("\n");
        sb.append("; Feel free to look at: https://github.com/TW2").append("\n");
        sb.append("Title: ").append(ass.title).append("\n");
        sb.append("ScriptType: ").append(ass.scriptType).append("\n");
        //+
        sb.append("Original Script: ").append(ass.originalScript).append("\n");
        sb.append("Original Translation: ").append(ass.translation).append("\n");
        sb.append("Original Editing: ").append(ass.editing).append("\n");
        sb.append("Original Timing: ").append(ass.timing).append("\n");
        sb.append("Synch Point: ").append(ass.synchPoint).append("\n");
        sb.append("Script Updated By: ").append(ass.updateBy).append("\n");
        sb.append("Update Details: ").append(ass.updateDetails).append("\n");
        //+
        sb.append("WrapStyle: ").append(ass.wrapStyle).append("\n");
        sb.append("ScaledBorderAndShadow: ").append(ass.scaled).append("\n");
        sb.append("YCbCr Matrix: ").append(ass.matrix).append("\n");
        sb.append("PlayResX: ").append(ass.resX).append("\n");
        sb.append("PlayResY: ").append(ass.resY).append("\n");
        sb.append("").append("\n");
        //[Aegisub Project Garbage]
        sb.append("[Aegisub Project Garbage]").append("\n");
        sb.append("Last Style Storage: ").append(ass.aegisLastStyleStorage).append("\n");
        sb.append("Audio File: ").append(ass.aegisAudioFile).append("\n");
        sb.append("Video File: ").append(ass.aegisVideoFile).append("\n");
        sb.append("Video AR Mode: ").append(ass.aegisVideoARMode).append("\n");
        sb.append("Video AR Value: ").append(ass.aegisVideoARValue).append("\n");
        sb.append("Video Zoom Percent: ").append(ass.aegisVideoZoomPercent).append("\n");
        sb.append("Active Line: ").append(ass.aegisActiveLine).append("\n");
        sb.append("Video Position: ").append(ass.aegisVideoPosition).append("\n");
        sb.append("").append("\n");        
        //[Yggdrasil Section]
        sb.append("[Yggdrasil Section]").append("\n");
        for(AssPaths ps : ass.svgPaths){
            sb.append(ps.getSection()).append(ps.getSvgPath()).append("\n");
        }
        for(ISO_3166 iso : ass.getLanguages()){
            sb.append("ISO-3166 Language: ").append(iso.getAlpha3()).append("\n");
        }
        sb.append("\n");
        //[V4+ Styles]
        sb.append("[V4+ Styles]").append("\n");
        sb.append("Format: Name, Fontname, Fontsize, "
                + "PrimaryColour, SecondaryColour, OutlineColour, BackColour, "
                + "Bold, Italic, Underline, StrikeOut, "
                + "ScaleX, ScaleY, Spacing, Angle, "
                + "BorderStyle, Outline, Shadow, "
                + "Alignment, MarginL, MarginR, MarginV, Encoding").append("\n");
        if(ass.styles.isEmpty() == true){
            sb.append(AssStyle.getStyle()).append("\n");
        }else{
            ass.styles.entrySet().forEach((entry) -> {
                sb.append(AssStyle.toAssStyleLine(entry.getValue())).append("\n");
            });
        }
        sb.append("").append("\n");
        //[Events]
        sb.append("[Events]").append("\n");
        sb.append("Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text").append("\n");
        ass.events.forEach((ev) -> {
            sb.append(AssEvent.getAssEventLine(ev)).append("\n");
            if(ev.getAllTexts().isEmpty() == false){
                    boolean notFirst = false;
                    for(Map.Entry<ISO_3166, String> entry : ev.getAllTexts().entrySet()){
                        if(notFirst){
                            sb.append(AssEvent.getAssEventLine(ev, entry.getKey(), entry.getValue()));
                            sb.append("\n");
                        }else{
                            notFirst = true;
                        }
                    }
                }
        });
        sb.append("").append("\n");
        
        return sb.toString();
    }

    //--------------------------------------------------------------------------
    
    public void setTitle(String title) {
        this.title = title;
    }

    public String getTitle() {
        return title;
    }

    public void setScriptType(String scriptType) {
        this.scriptType = scriptType;
    }

    public String getScriptType() {
        return scriptType;
    }

    public String getOriginalScript() {
        return originalScript;
    }

    public void setOriginalScript(String originalScript) {
        this.originalScript = originalScript;
    }

    public String getTranslation() {
        return translation;
    }

    public void setTranslation(String translation) {
        this.translation = translation;
    }

    public String getEditing() {
        return editing;
    }

    public void setEditing(String editing) {
        this.editing = editing;
    }

    public String getTiming() {
        return timing;
    }

    public void setTiming(String timing) {
        this.timing = timing;
    }

    public String getSynchPoint() {
        return synchPoint;
    }

    public void setSynchPoint(String synchPoint) {
        this.synchPoint = synchPoint;
    }

    public String getUpdateBy() {
        return updateBy;
    }

    public void setUpdateBy(String updateBy) {
        this.updateBy = updateBy;
    }

    public String getUpdateDetails() {
        return updateDetails;
    }

    public void setUpdateDetails(String updateDetails) {
        this.updateDetails = updateDetails;
    }

    public void setWrapStyle(String wrapStyle) {
        this.wrapStyle = wrapStyle;
    }

    public String getWrapStyle() {
        return wrapStyle;
    }

    public void setScaled(String scaled) {
        this.scaled = scaled;
    }

    public String getScaled() {
        return scaled;
    }

    public void setMatrix(String matrix) {
        this.matrix = matrix;
    }

    public String getMatrix() {
        return matrix;
    }

    public void setResX(String resX) {
        this.resX = resX;
    }

    public String getResX() {
        return resX;
    }

    public void setResY(String resY) {
        this.resY = resY;
    }

    public String getResY() {
        return resY;
    }

    public void setAegisLastStyleStorage(String aegisLastStyleStorage) {
        this.aegisLastStyleStorage = aegisLastStyleStorage;
    }

    public String getAegisLastStyleStorage() {
        return aegisLastStyleStorage;
    }

    public void setAegisAudioFile(String aegisAudioFile) {
        this.aegisAudioFile = aegisAudioFile;
    }

    public String getAegisAudioFile() {
        return aegisAudioFile;
    }

    public void setAegisVideoFile(String aegisVideoFile) {
        this.aegisVideoFile = aegisVideoFile;
    }

    public String getAegisVideoFile() {
        return aegisVideoFile;
    }

    public void setAegisVideoARMode(String aegisVideoARMode) {
        this.aegisVideoARMode = aegisVideoARMode;
    }

    public String getAegisVideoARMode() {
        return aegisVideoARMode;
    }

    public void setAegisVideoARValue(String aegisVideoARValue) {
        this.aegisVideoARValue = aegisVideoARValue;
    }

    public String getAegisVideoARValue() {
        return aegisVideoARValue;
    }

    public void setAegisVideoZoomPercent(String aegisVideoZoomPercent) {
        this.aegisVideoZoomPercent = aegisVideoZoomPercent;
    }

    public String getAegisVideoZoomPercent() {
        return aegisVideoZoomPercent;
    }

    public void setAegisActiveLine(String aegisActiveLine) {
        this.aegisActiveLine = aegisActiveLine;
    }

    public String getAegisActiveLine() {
        return aegisActiveLine;
    }

    public void setAegisVideoPosition(String aegisVideoPosition) {
        this.aegisVideoPosition = aegisVideoPosition;
    }

    public String getAegisVideoPosition() {
        return aegisVideoPosition;
    }

    public void setEvents(List<AssEvent> events) {
        this.events = events;
    }

    public List<AssEvent> getEvents() {
        return events;
    }

    public void setStyles(Map<String, AssStyle> styles) {
        this.styles = styles;
    }

    public Map<String, AssStyle> getStyles() {
        return styles;
    }

    public void setNames(List<String> names) {
        this.names = names;
    }

    public List<String> getNames() {
        return names;
    }

    public List<AssPaths> getSvgPaths() {
        return svgPaths;
    }

    public void setSvgPaths(List<AssPaths> svgPaths) {
        this.svgPaths = svgPaths;
    }

    public void setAssFile(File file) {
        this.assFile = file;
    }

    public File getAssFile() {
        return assFile;
    }

    public List<File> getAttachedFonts() {
        return attachedFonts;
    }

    public void setAttachedFonts(List<File> attachedFonts) {
        this.attachedFonts = attachedFonts;
    }

    public List<File> getAttachedGraphics() {
        return attachedGraphics;
    }

    public void setAttachedGraphics(List<File> attachedGraphics) {
        this.attachedGraphics = attachedGraphics;
    }

    public List<ISO_3166> getLanguages() {
        return languages;
    }

    public void setLanguages(List<ISO_3166> languages) {
        this.languages = languages;
    }
    
}
